import java.util.*;
public class LL_Implentation_Queue {
    public static class Node{
        int data;
        Node next;
        Node(int data){
            this.data = data;
            this.next=null;
        }
    }
    public static class queueL{
        Node head = null;
        Node tail = null;
        int size = 0;
        public void add(int data){
            Node newNode = new Node(data);
            if(size==0){
                head = tail = newNode;
            }
            tail.next = newNode;
            tail = newNode;
            tail.next=head;
            size++;
        }
        public int peek(){
            if(size==0){
                System.out.println("Queue is empty");
                return -1;
            }
            return head.data;
        }
        public int remove(){
            if(size==0){
                System.out.println("Queue is empty");
                return -1;
            }
            int x = head.data;
            head=head.next;
            tail.next=head;
            size--;
            return x;
        }
        public void display(){
            if(size==0){
                System.out.println("Queue is empty");
            }
            Node temp = head;
            while(temp!=null){
                System.out.print(temp.data+" ");
                temp=temp.next;
            }
            System.out.println();
        }
        public boolean isEmpty(){
            if(size==0){
                return true;
            }
            else{
                return false;
            }
        }
    }
    public static void main(String[] args) {
        queueL q = new queueL();
        q.display();
        System.out.println(q.isEmpty());
        q.add(1);
        q.add(2);
        q.add(3);
        q.add(7);
        System.out.println(q.isEmpty());
        q.display();
        System.out.println(q.peek());
        q.remove();
        q.display();
    }
}
